{"version":3,"sources":["app.js"],"names":["angular","module","config","$mdThemingProvider","theme","primaryPalette","$mdDateLocaleProvider","formatDate","date","moment","format","component","templateUrl","controller","transclude","meetingFactory","$http","API_URL","KEY","getHours","seconds","getUTCWithDST","DST","UTC","VerifyIfMeetingIsPossible","firtsUTC","secondUTC","getDiffBetweenHours","firstHour","secondHour","diffHour","Math","sign","firstHourIsLessThanSecond","getAmPm","hour","hours_map","13","14","15","16","17","18","19","20","21","22","23","24","ceilHour","ceil","initAutoComplete","id","google","maps","places","Autocomplete","document","getElementById","getTimeZoneData","location","timestamp","get","getBetterMeetingHour","hometown","destination","hometown_UTC","rawOffset","destination_UTC","hometown_DST","dstOffset","destination_DST","$inject","factory","meetingController","getPlace","param","placeId","model","place","vm","formatted_address","geometry","lat","lng","timeStamp","unix","then","result","data","length","hours","this","currentDay","Date","maxDate","setFullYear","getFullYear","onlyWeekdays","day","getDay","getData","addListener","constant"],"mappings":"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","file":"app.min.js","sourcesContent":[";(function () {\n  'use strict';\n\n  angular\n    .module('app', ['env',\n                    'ngSanitize',\n                    'ngMaterial'])\n\n    .config([\"$mdThemingProvider\", function($mdThemingProvider) {\n\t    $mdThemingProvider.theme('default')\n\t      .primaryPalette('light-blue');\n\t  }])\n\n    .config([\"$mdDateLocaleProvider\", function($mdDateLocaleProvider) {\n      $mdDateLocaleProvider.formatDate = function(date) {\n        return moment(date).format('DD/MM/YYYY');\n      };\n    }]);\n    \n})();\n\n(function(){\n  'use strict';\n\n  angular\n    .module('app')\n    .component('meeting', {\n      templateUrl: 'meeting/template.html',\n      controller: 'meetingController',\n      transclude: true\n    });\n})();\n(function(){\n  'use strict';\n\n    meetingFactory.$inject = [\"$http\", \"API_URL\", \"KEY\"];\n  angular\n    .module('app')\n    .factory('meetingFactory', meetingFactory);\n\n    /*@ngInject*/\n    function meetingFactory($http, API_URL, KEY) {\n\n      return {\n    \t  initAutoComplete: initAutoComplete,\n    \t  getTimeZoneData: getTimeZoneData,\n    \t  getBetterMeetingHour: getBetterMeetingHour\n      };\n\n      function initAutoComplete(id) {\n      \tvar autoComplete = new google.maps.places.Autocomplete(\n      \t  (document.getElementById(id))\n      \t);\n\n      \treturn autoComplete;\n      }\n\n      function getTimeZoneData(location, timestamp) {\n      \treturn $http.get(\n      \t\tAPI_URL + '?key=' + KEY + '&location=' + location + '&timestamp=' + timestamp\n      \t);\n      }\n\n      function getBetterMeetingHour(places) {\n      \tvar hometown = places[0];\n      \tvar destination = places[1];\n\n      \tvar hometown_UTC = getHours(hometown.rawOffset);\n      \tvar destination_UTC = getHours(destination.rawOffset);\n\n      \tvar hometown_DST = getHours(hometown.dstOffset);\n      \tvar destination_DST = getHours(destination.dstOffset);\n\n      \thometown_UTC = getUTCWithDST(hometown_DST, hometown_UTC);\n      \tdestination_UTC = getUTCWithDST(destination_DST, destination_UTC);\n      \t\n      \tif(!VerifyIfMeetingIsPossible(hometown_UTC, destination_UTC)) {\n      \t\treturn false;\n      \t} \n    \t\t\n    \t\tvar diffHour = getDiffBetweenHours(hometown_UTC, destination_UTC);\n\n    \t\tif(firstHourIsLessThanSecond(hometown_UTC, destination_UTC)){\n  \t\t\t  return {\n  \t\t\t\t  hometown: getAmPm(9),\n  \t\t\t\t  destination: getAmPm(9 + diffHour)\n  \t\t\t  };\n\t\t\t  }\n\n\t\t\t\treturn {\n    \t\t\tdestination: getAmPm(9),\n    \t\t\thometown: getAmPm(9 + diffHour)\n    \t\t};\n      }\n\n      function getHours(seconds) {\n      \treturn seconds / 3600;\n      }\n\n      function getUTCWithDST(DST, UTC) {\n      \treturn DST + UTC;\n      }\n\n      function VerifyIfMeetingIsPossible(firtsUTC, secondUTC) {\n      \treturn getDiffBetweenHours(firtsUTC ,   secondUTC) <= 9;\n      }\n\n      function getDiffBetweenHours(firstHour, secondHour) {\n      \tvar diffHour = firstHour - secondHour;\n      \tif(Math.sign(diffHour) === -1) {\n      \t\treturn diffHour * (-1);\n      \t}\n\n      \treturn diffHour;\n      }\n\n      function firstHourIsLessThanSecond(firstHour, secondHour) {\n      \treturn firstHour < secondHour;\n      }\n\n      function getAmPm(hour) {\n       \tvar hours_map = {\n\t      \t'13': 1,\n\t      \t'14': 2,\n\t      \t'15': 3,\n\t      \t'16': 4,\n\t      \t'17': 5,\n\t      \t'18': 6,\n\t      \t'19': 7,\n\t      \t'20': 8,\n\t      \t'21': 9,\n\t      \t'22': 10,\n\t      \t'23': 11,\n\t      \t'24': 12\n      \t}; \n\n        var ceilHour = Math.ceil(hour);\n\n      \treturn ceilHour > 12 ? \n      \t\thours_map[ceilHour] + 'PM' : \n      \t\tceilHour + 'AM';\n      }\n    }\n})();\n(function(){\n  'use strict';\n\n  meetingController.$inject = [\"meetingFactory\"];\n  angular\n  .module('app')\n  .controller('meetingController', meetingController);\n\n  /*@ngInject*/  \n  function meetingController(meetingFactory) {\n    /* jshint ignore:start */\n    var vm = this;\n    /* jshint ignore:end*/\n\n    var places = [];\n    vm.hours = '';\n\n    vm.currentDay = new Date(); \n    vm.maxDate = new Date(new Date().setFullYear(new Date().getFullYear() + 1));  \n\n    vm.onlyWeekdays = function(date) {\n      var day = date.getDay();\n      return day === 1 || day === 2 || day === 3 || day === 4 || day === 5;\n    };\n\n    function getPlace(param, placeId, model) {\n      var place = param.getPlace();\n      vm[model] = place.formatted_address;\n\n      var lat = place.geometry.location.lat();\n      var long = place.geometry.location.lng();\n\n      var location = lat + ',' + long;\n      var timeStamp = moment(moment(vm.date).format('YYYY-MM-DD')).unix();\n\n      meetingFactory.getTimeZoneData(location, timeStamp)\n      .then(function(result){     \n        places[placeId] = result.data;\n\n        if(places.length == 2 && vm.date) {\n          vm.hours = meetingFactory.getBetterMeetingHour(places);\n        }\n      });\n    }\n\n    vm.getData = function() {\n      if(places.length == 2) {\n        getPlace(hometown, 0, 'hometown');\n        getPlace(destination, 1, 'destination');\n      }\n    };\n\n    var hometown = meetingFactory.initAutoComplete('hometown');\n\n    hometown.addListener('place_changed', function() {\n      getPlace(hometown, 0, 'hometown');\n    });\n\n    var destination = meetingFactory.initAutoComplete('destination');\n\n    destination.addListener('place_changed', function(){ \n      getPlace(destination, 1, 'destination');\n    });\n  } \n})();\nangular.module(\"env\", [])\n.constant(\"API_URL\", \"https://maps.googleapis.com/maps/api/timezone/json\")\n.constant(\"KEY\", \"AIzaSyBdKcOOJljK0GCbqaM5EzsSkJorY7ZLsFo\");\n"]}